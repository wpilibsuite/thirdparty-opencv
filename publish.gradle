apply plugin: 'maven-publish'

publishing {
    repositories {
        maven {
            url "${System.getProperty('user.home')}/releases/maven/development"
        }
        maven {
            url "${System.getProperty('user.home')}/releases/maven/release"
        }
    }
}

def pubVersion = "${project.ext.version}-17"

def outputsFolder = file("$project.buildDir/outputs")

def baseArtifactId = 'opencv'
def artifactGroupId = 'edu.wpi.first.thirdparty.frc2019.opencv'
def zipBaseName = '_GROUP_edu_wpi_first_thirdparty_frc2019_opencv_ID_opencv-cpp_CLS'
def jniBaseName = "_GROUP_edu_wpi_first_thirdparty_frc2019_opencv_ID_opencv-jni_CLS"
def javaBaseName = "_GROUP_edu_wpi_first_thirdparty_frc2019_opencv_ID_opencv-java_CLS"

def versionFile = file("$outputsFolder/version.txt")

task outputVersions() {
    description = 'Prints the versions of this to a file for use by the downstream packaging project'
    group = 'Build'
    outputs.files(versionFile)

    doFirst {
        buildDir.mkdir()
        outputsFolder.mkdir()
    }

    doLast {
        versionFile.write pubVersion
    }
}

build.dependsOn outputVersions
copyAllOutputs.dependsOn outputVersions
copyAllOutputs.inputs.file versionFile
copyAllOutputs.from versionFile

task cppSourcesZip(type: Zip, dependsOn: make) {
    destinationDir = outputsFolder
    baseName = zipBaseName
    classifier = "sources"

    from(licenseFile) {
        into '/'
    }

    from('opencv/3rdparty') {
        into '/3rdparty'
        include '**/*.cpp', '**/*.h*'
    }

    from('opencv/modules') {
        into '/modules'
        include '**/*.cpp', '**/*.h*'
    }

    from(project.cmakeBuildDirectory.resolve('modules')) {
        into '/modules'
        include '**/*.cpp', '**/*.h*'
    }

    includeEmptyDirs = false
}

task cppHeadersZip(type: Zip, dependsOn: make) {
    destinationDir = outputsFolder
    baseName = zipBaseName
    classifier = "headers"

    from(licenseFile) {
        into '/'
    }

    from ('opencv/include') {
        into '/'
        exclude '**/CMakeLists.txt'
    }

    from (project.cmakeBuildDirectory.resolve('opencv2').toFile()) {
        into '/opencv2/'
    }

    from(rootPath.resolve('modules').toFile()) {
        include '*/include/**/*.hpp'
        include '*/include/**/*.h'
        exclude 'java/**'
        exclude 'python/**'
        eachFile { FileCopyDetails fcp ->
            fcp.relativePath = new RelativePath(!fcp.file.isDirectory(), fcp.relativePath.segments[2..-1] as String[])
        }
    }
    includeEmptyDirs = false
}
['', 'Debug' ].each{ buildType ->

    def staticBuildDir = buildType.contains('Debug') ? project.cmakeBuildDebugDirectory : project.cmakeBuildDirectory
    def sharedBuildDir = buildType.contains('Debug') ? project.cmakeBuildSharedDebugDirectory : project.cmakeBuildSharedDirectory

    def outputClassifier = project.ext.platformClassifier
    def outputClassifierStatic = project.ext.platformClassifier + 'static'
    if (buildType.contains('Debug')) {
        outputClassifier = outputClassifier + 'debug'
        outputClassifierStatic = outputClassifierStatic + 'debug'
    }

    def buildTypeFolder = buildType.contains('Debug') ? 'Debug' : 'Release'

    project.tasks.create('cppLibsZip' + buildType, Zip) {
        dependsOn tasks.named('makeShared' + buildType)
        destinationDir = outputsFolder
        classifier = outputClassifier
        baseName = zipBaseName
        duplicatesStrategy = 'exclude'

        manifest {
            attributes(
                    "Created-By": "WPILib Gradle Build Script",
                    "Implementation-Title": "OpenCV Native Libraries, ${project.ext.platformClassifier}",
                    "Implementation-Version": pubVersion,
                    "Implementation-Vendor": "Itseez",

                    "Bundle-Name": "${baseName}",
                    "Bundle-Version": pubVersion,
                    "Bundle-License": "https://opensource.org/licenses/BSD-3-Clause",
                    "Bundle-Vendor": "WPILib")
        }

        from(licenseFile) {
            into '/'
        }

        if (!project.platform.startsWith("windows")) {
            if (buildType.contains('Debug') && project.platform.startsWith('linux')) {
                dependsOn 'stripLibsSharedDebug'
                from("$buildDir/stripSharedDebug") {
                    into project.platformPath + '/shared'
                }
            } else {
                from(sharedBuildDir.resolve("lib").toFile()) {
                    into project.platformPath + '/shared'
                    include '*.so.*.*.*'
                    exclude 'cv2.so'
                    exclude '**/*dephelp*'
                    eachFile { f->
                        f.name = f.name.replace("${project.ext.version}", "${project.ext.soVersion}")
                    }
                }
                from(sharedBuildDir.resolve("lib").toFile()) {
                    into project.platformPath + '/shared'
                    include "*.${project.ext.version}.dylib".toString()
                    eachFile { f->
                        f.name = f.name.replace("${project.ext.version}", "${project.ext.soVersion}")
                    }
                    exclude 'cv2.so'
                    exclude '**/*dephelp*'
                }
                from(sharedBuildDir.resolve("lib").toFile()) {
                    into project.platformPath + '/shared'

                    include 'libopencv_java*.so'
                    include 'libopencv_java*.dylib'
                    exclude 'cv2.so'
                    exclude '**/*dephelp*'
                }
                from(sharedBuildDir.resolve("3rdparty").resolve("lib").toFile()) {
                    into project.platformPath + '/shared'
                    include '*.so'
                }
            }
        } else {
            from(sharedBuildDir.resolve("lib").resolve(buildTypeFolder).toFile()) {
                into project.platformPath + '/shared'
                include '*.lib'  // import library
                include '*.dll'
                include '*.pdb'
                exclude 'opencv_ts*'
            }
            from(sharedBuildDir.resolve("bin").resolve(buildTypeFolder).toFile()) {
                into project.platformPath + '/shared'
                include '*.lib'  // import library
                include '*.dll'
                exclude 'opencv_ts*'
            }
            from(sharedBuildDir.resolve("3rdparty").resolve("lib").toFile()) {
                into project.platformPath + '/shared'
                include '*.dll'
            }
        }
    }

    project.tasks.create('cppLibsZipStatic' + buildType, Zip) {
        dependsOn tasks.named('nativeLibLinks' + buildType)
        destinationDir = outputsFolder
        classifier = outputClassifierStatic
        baseName = zipBaseName
        duplicatesStrategy = 'exclude'

        manifest {
            attributes(
                    "Created-By": "WPILib Gradle Build Script",
                    "Implementation-Title": "OpenCV Native Libraries, ${project.ext.platformClassifier}",
                    "Implementation-Version": pubVersion,
                    "Implementation-Vendor": "Itseez",

                    "Bundle-Name": "${baseName}",
                    "Bundle-Version": pubVersion,
                    "Bundle-License": "https://opensource.org/licenses/BSD-3-Clause",
                    "Bundle-Vendor": "WPILib")
        }

        from(licenseFile) {
            into '/'
        }

        if (!project.platform.startsWith("windows")) {
            from(staticBuildDir.resolve("lib").toFile()) {
                into project.platformPath + '/static'
                include 'libopencv*.a'
                exclude 'libopencv_*.a'
            }
        } else {
            from(staticBuildDir.resolve("lib").resolve(buildTypeFolder).toFile()) {
                into project.platformPath + '/static'
                include 'opencv*.lib'
                exclude 'opencv_*.lib'
            }
        }
    }

    project.tasks.create('jniJar' + buildType, Zip) {
        dependsOn tasks.named('make' + buildType)
        destinationDir = outputsFolder
        classifier = outputClassifier
        baseName = jniBaseName
        duplicatesStrategy = 'exclude'

        manifest {
            attributes(
                    "Created-By": "WPILib Gradle Build Script",
                    "Implementation-Title": "OpenCV JNI Library, ${project.ext.platformClassifier}",
                    "Implementation-Version": pubVersion,
                    "Implementation-Vendor": "Itseez",

                    "Bundle-Name": "${baseName}",
                    "Bundle-Version": pubVersion,
                    "Bundle-License": "https://opensource.org/licenses/BSD-3-Clause",
                    "Bundle-Vendor": "WPILib")
        }

        from(licenseFile) {
            into '/'
        }

        if (!project.platform.startsWith("windows")) {
            from(staticBuildDir.resolve("lib").toFile()) {
                into project.platformPath
                include '*java*.so'
                include '*java*.dylib'
            }
        } else {
            from(staticBuildDir.resolve("lib").resolve("Release").toFile()) {
                into project.platformPath
                include '*java*.dll'
            }
        }
    }

}

task outputJar(type: Jar, dependsOn: make) {
    baseName = javaBaseName
    destinationDir = outputsFolder
    manifest {
        attributes(
                "Created-By": "WPILib Gradle Build Script",
                "Implementation-Title": "OpenCV",
                "Implementation-Version": pubVersion,
                "Implementation-Vendor": "Itseez",

                "Bundle-Name": project.name,
                "Bundle-Version": pubVersion,
                "Bundle-License": "https://opensource.org/licenses/BSD-3-Clause",
                "Bundle-Vendor": "WPILib")
    }

    from { zipTree(project.pathToOpenCVJar.toFile()) } {
        exclude 'META-INF/*'
        exclude 'META-INF'
        exclude '**/*.java'
    }
}

task sourcesJar(type: Jar, dependsOn: make) {
    baseName = javaBaseName
    destinationDir = outputsFolder
    classifier = 'sources'
    manifest {
        attributes(
                "Created-By": "WPILib Gradle Build Script",
                "Implementation-Title": "OpenCV Java Sources",
                "Implementation-Version": pubVersion,
                "Implementation-Vendor": "Itseez",

                "Bundle-Name": "${project.name}-sources",
                "Bundle-Version": pubVersion,
                "Bundle-License": "https://opensource.org/licenses/BSD-3-Clause",
                "Bundle-Vendor": "WPILib")
    }

    from(project.cmakeBuildDirectory.resolve("modules").resolve("java").resolve("jar").resolve("opencv").resolve("java").toFile()) {
        include '**/*.java'
    }
}

build.dependsOn cppHeadersZip
build.dependsOn cppSourcesZip
build.dependsOn cppLibsZip
build.dependsOn jniJar
build.dependsOn cppLibsZipDebug
build.dependsOn cppLibsZipStatic
build.dependsOn cppLibsZipStaticDebug
build.dependsOn jniJarDebug
build.dependsOn outputJar
build.dependsOn sourcesJar

artifacts {
    archives cppHeadersZip
    archives cppSourcesZip
    archives cppLibsZip
    archives jniJar
    archives cppLibsZipDebug
    archives cppLibsZipStatic
    archives cppLibsZipStaticDebug
    archives jniJarDebug
    archives outputJar
    archives sourcesJar
}

addTaskToCopyAllOutputs(cppSourcesZip)
addTaskToCopyAllOutputs(cppHeadersZip)
addTaskToCopyAllOutputs(cppLibsZip)
addTaskToCopyAllOutputs(jniJar)
addTaskToCopyAllOutputs(cppLibsZipDebug)
addTaskToCopyAllOutputs(jniJarDebug)
addTaskToCopyAllOutputs(cppLibsZipStatic)
addTaskToCopyAllOutputs(cppLibsZipStaticDebug)
addTaskToCopyAllOutputs(outputJar)
addTaskToCopyAllOutputs(sourcesJar)

model {
    publishing {
        def allTask
        if (!project.hasProperty('jenkinsBuild')) {
            allTask = createAllCombined([cppLibsZip], 'opencv', zipBaseName, Zip, project, '')
        }

        def allJniTask
        if (!project.hasProperty('jenkinsBuild')) {
            allJniTask = createAllCombined([jniJar], "opencvJNI", jniBaseName, Jar, project, '')
        }

        def allTaskDebug
        if (!project.hasProperty('jenkinsBuild')) {
            allTaskDebug = createAllCombined([cppLibsZipDebug], 'opencv', zipBaseName, Zip, project, 'debug')
        }

        def allJniTaskDebug
        if (!project.hasProperty('jenkinsBuild')) {
            allJniTaskDebug = createAllCombined([jniJarDebug], "opencvJNI", jniBaseName, Jar, project, 'debug')
        }

        def allTaskStatic
        if (!project.hasProperty('jenkinsBuild')) {
            allTaskStatic = createAllCombined([cppLibsZipStatic], 'opencv', zipBaseName, Zip, project, 'static')
        }

        def allTaskStaticDebug
        if (!project.hasProperty('jenkinsBuild')) {
            allTaskStaticDebug = createAllCombined([cppLibsZipStaticDebug], 'opencv', zipBaseName, Zip, project, 'staticdebug')
        }

        publications {
            java(MavenPublication) {
                artifact outputJar
                artifact sourcesJar {
                }

                artifactId = "${baseArtifactId}-java"
                groupId artifactGroupId
                version pubVersion
            }
            jni(MavenPublication) {
                artifact jniJar
                artifact jniJarDebug

                if (!project.hasProperty('jenkinsBuild')) {
                    artifact allJniTask
                    artifact allJniTaskDebug
                }

                artifactId = "${baseArtifactId}-jni"
                groupId artifactGroupId
                version pubVersion
            }
            cpp(MavenPublication) {
                artifact cppHeadersZip
                artifact cppSourcesZip
                artifact cppLibsZip
                artifact cppLibsZipDebug
                artifact cppLibsZipStatic
                artifact cppLibsZipStaticDebug

                if (!project.hasProperty('jenkinsBuild')) {
                    artifact allTask
                    artifact allTaskDebug
                    artifact allTaskStatic
                    artifact allTaskStaticDebug
                }

                artifactId = "${baseArtifactId}-cpp"
                groupId artifactGroupId
                version pubVersion
            }
        }
        repositories {
            maven {
                url "${System.getProperty('user.home')}/releases/maven/${project.repo}"
            }
        }
    }
}
