import org.gradle.internal.os.OperatingSystem

import java.nio.file.Files
import java.nio.file.Paths;

apply plugin: 'java'

def date = new Date()
def formattedDate = date.format('yyMMdd')
ext.version = "4.8.0"
ext.soVersion = "4.8"
ext.libVersion = "${ext.version.replace(".", "")}"

ext.licenseFile = file("$rootDir/opencv/LICENSE")

def outputsFolder = file("$buildDir/allOutputs")

task copyAllOutputs(type: Copy) {
    destinationDir = outputsFolder
}

if (project.hasProperty('runmerge')) {
    apply from: 'merge.gradle'
}

build.dependsOn copyAllOutputs

ext.addTaskToCopyAllOutputs = { task ->
    copyAllOutputs.dependsOn task
    copyAllOutputs.inputs.file task.archiveFile
    copyAllOutputs.from task.archiveFile
}

ext {
    defaultCmakeArgs = [
            '-DWITH_CUDA=OFF',
            '-DWITH_IPP=OFF',
            '-DWITH_ITT=OFF',
            '-DWITH_OPENCL=OFF',
            '-DWITH_FFMPEG=OFF',
            '-DWITH_OPENEXR=OFF',
            '-DWITH_GSTREAMER=OFF',
            '-DWITH_LAPACK=OFF',
            '-DWITH_GTK=OFF',
            '-DWITH_1394=OFF',
            '-DWITH_JASPER=OFF',
            '-DWITH_TIFF=OFF',
            '-DBUILD_JPEG=ON',
            '-DBUILD_OPENJPEG=ON',
            '-DBUILD_PNG=ON',
            '-DBUILD_ZLIB=ON',
            '-DBUILD_TESTS=OFF',
            '-DPython_ADDITIONAL_VERSIONS=3.5',
            '-DWITH_WEBP=OFF',
            '-DBUILD_JAVA=ON',
            '-DBUILD_WITH_STATIC_CRT=OFF',
            '-DWITH_PROTOBUF=OFF',
            '-DWITH_DIRECTX=OFF',
            '-DENABLE_CXX11=ON',
            '-DOPENCV_JAVA_SOURCE_VERSION=1.8',
            '-DOPENCV_JAVA_TARGET_VERSION=1.8',
            '-DWITH_MSMF_DXVA=OFF',
            '-DCMAKE_INSTALL_RPATH=$ORIGIN',
            '-DCMAKE_BUILD_WITH_INSTALL_RPATH=TRUE',
            '-DBUILD_opencv_apps=OFF',
            '-DBUILD_TESTS=OFF',
            '-DBUILD_PERF_TESTS=OFF',
            "-DOPENCV_EXTRA_MODULES_PATH=$rootDir/opencv_contrib/modules/aruco",
            '-DCMAKE_INSTALL_PREFIX=install'
    ]
}

def getPlatform() {
    def platform
    def os_name = System.getProperty("os.name")
    def os_arch = System.getProperty("os.arch")

    if (os_arch == 'amd64') {
        os_arch = 'x86_64'
    } else if (os_arch == 'i386') {
        os_arch = 'x86'
    } else if (os_arch == 'aarch64' || os_arch == 'arm64') {
        os_arch = 'arm64'
    }

    if (OperatingSystem.current().isWindows()) {
        platform = "windows-${os_arch}"
    } else if (OperatingSystem.current().isLinux()) {
        platform = "linux-${os_arch}"
    } else if (OperatingSystem.current().isMacOsX()) {
        platform = "osx-${os_arch}"
    } else {
        platform = "${os_name}-${os_arch}"
    }
    return platform
}

def getPlatformPath(platform) {
    if (platform == "linux-athena") {
        return "linux/athena"
    } else if (platform == "linux-arm32") {
        return "linux/arm32"
    } else if (platform == "linux-arm64") {
        return "linux/arm64"
    } else if (platform == "linux-x86") {
        return "linux/x86"
    } else if (platform == "linux-x86_64") {
        return "linux/x86-64"
    } else if (platform == "osx-x86") {
        return "osx/x86"
    } else if (platform == "osx-x86_64") {
        return "osx/x86-64"
    } else if (platform == "osx-arm64") {
        return "osx/arm64"
    } else if (platform == "windows-x86") {
        return "windows/x86"
    } else if (platform == "windows-x86_64") {
        return "windows/x86-64"
    } else if (platform == "windows-arm64") {
        return "windows/arm64"
    } else {
        return ""
    }
}

// Determine what repo to publish to. Default is development. Valid options are development, beta, stable, and release
if (!project.hasProperty('repo')) {
    allprojects {
        ext.repo = 'development'
    }
}

if (!project.hasProperty('platform')) {
    println "No 'platform' property specified; using the build system's platform"
    ext.platform = getPlatform()
}

if (project.hasProperty('forcealternatemacbuild')) {
    if (project.platform == 'osx-arm64') {
        ext.platform = 'osx-x86_64'
    } else if (ext.platform == 'osx-x86_64') {
        ext.platform = 'osx-arm64'
    }
}

ext.platformPath = getPlatformPath(project.platform)

if (!project.hasProperty('cmakePath')) {
    ext.cmakePath = "cmake"
}

println "Building for platform ${project.platform}"

ext.platformClassifier = project.platform.replaceFirst('-', '').replace('_', '-')

ext.rootPath = Paths.get(projectDir.canonicalPath).resolve('opencv')
ext.cmakeBuildDirectory = Paths.get(projectDir.canonicalPath).resolve('build').resolve(project.platformPath).resolve('buildStatic').resolve(project.platform)
ext.cmakeBuildSharedDirectory = Paths.get(projectDir.canonicalPath).resolve('build').resolve(project.platformPath).resolve('buildShared').resolve(project.platform)

ext.cmakeBuildDebugDirectory = Paths.get(projectDir.canonicalPath).resolve('build').resolve(project.platformPath).resolve('buildStaticDebug').resolve(project.platform)
ext.cmakeBuildSharedDebugDirectory = Paths.get(projectDir.canonicalPath).resolve('build').resolve(project.platformPath).resolve('buildSharedDebug').resolve(project.platform)

ext.jarName = "opencv-${project.libVersion}.jar"
ext.pathToOpenCVJar = ext.cmakeBuildDirectory.resolve("bin").resolve(ext.jarName)

if (project.platform.startsWith('windows')) {
    def gen = "Visual Studio 16 2019"
    ext.cmakeArch = 'Win32'
    if (project.platform == "windows-x86_64") {
        ext.cmakeArch = 'x64'
    } else if (project.platform == "windows-arm64") {
        ext.cmakeArch = 'arm64'
    }
    ext.cmakeGenerator = gen
}

repositories {
    mavenLocal()
    mavenCentral()
}

def stripExe = 'strip'
def objCopyExe = 'objcopy'

if (project.platform == "linux-athena") {
    stripExe = 'arm-frc2023-linux-gnueabi-strip'
    objCopyExe = 'arm-frc2023-linux-gnueabi-objcopy'
} else if (project.platform == "linux-arm32") {
    stripExe = 'armv6-bullseye-linux-gnueabihf-strip'
    objCopyExe = 'armv6-bullseye-linux-gnueabihf-objcopy'
} else if (project.platform == "linux-arm64") {
    stripExe = 'aarch64-bullseye-linux-gnu-strip'
    objCopyExe = 'aarch64-bullseye-linux-gnu-objcopy'
}

['': project.cmakeBuildDirectory,
 'Shared': project.cmakeBuildSharedDirectory,
 'Debug': project.cmakeBuildDebugDirectory,
 'SharedDebug': project.cmakeBuildSharedDebugDirectory
].each{ buildType, buildDirectory ->
    project.tasks.create('cmake' + buildType, Exec) {
        inputs.dir 'opencv'

        if (!Files.exists(buildDirectory)) {
            Files.createDirectories(buildDirectory)
        }

        def cmakeArgs = {
            def toolchain = null
            def args = defaultCmakeArgs
            if (buildType.contains("Shared")) {
                args = args + '-DBUILD_SHARED_LIBS=ON' + '-DOPENCV_DEBUG_POSTFIX=d'
            } else {
                args = args + '-DBUILD_SHARED_LIBS=OFF'
            }

            if (buildType.contains('Debug')) {
                args = args + '-DCMAKE_BUILD_TYPE=Debug'
            } else {
                args = args + '-DCMAKE_BUILD_TYPE=Release'
            }

            if (hasProperty('toolchain')) {
                toolchain = project.toolchain
            }
            if (project.platform == "linux-athena") {
                toolchain = projectDir.canonicalPath + "/arm-frc-gnueabi.toolchain.cmake"
                println "Using toolchain '${toolchain}'"
                return args + "-DCMAKE_TOOLCHAIN_FILE=${toolchain}" +
                    '-DENABLE_NEON=ON' +
                    '-DENABLE_VFPV3=ON' +
                    '-DOPENCV_EXTRA_FLAGS_DEBUG=-Og' +
                    "-DCMAKE_MODULE_PATH=$rootDir/arm-frc-modules"
            } else if (project.platform == "linux-arm32") {
                toolchain = projectDir.canonicalPath + "/arm-pi-gnueabihf.toolchain.cmake"
                println "Using toolchain '${toolchain}'"
                return args + "-DCMAKE_TOOLCHAIN_FILE=${toolchain}" +
                    '-DENABLE_NEON=ON' +
                    '-DENABLE_VFPV3=ON' +
                    '-DOPENCV_EXTRA_FLAGS_DEBUG=-Og' +
                    "-DCMAKE_MODULE_PATH=$rootDir/arm-frc-modules" +
                    '-DOPENCV_FORCE_LIBATOMIC_COMPILER_CHECK=ON'
            } else if (project.platform == "linux-arm64") {
                toolchain = projectDir.canonicalPath + "/aarch64-bullseye-gnu.toolchain.cmake"
                println "Using toolchain '${toolchain}'"
                return args + "-DCMAKE_TOOLCHAIN_FILE=${toolchain}" +
                    '-DOPENCV_EXTRA_FLAGS_DEBUG=-Og' +
                    "-DCMAKE_MODULE_PATH=$rootDir/arm-frc-modules"
            } else if (project.platform == "osx-arm64") {
                return args + "-DCMAKE_OSX_ARCHITECTURES=arm64" + "-DCMAKE_OSX_DEPLOYMENT_TARGET:String=11.0"
            } else if (project.platform == "osx-x86_64") {
                return args + "-DCMAKE_OSX_ARCHITECTURES=x86_64" + "-DCMAKE_OSX_DEPLOYMENT_TARGET:String=10.15"
            } else if (project.platform == "windows-arm64") {
                return args + "-DOPENCV_SKIP_SYSTEM_PROCESSOR_DETECTION=TRUE" + "-DAARCH64=ON"
            }
            if (toolchain) {
                println "Using toolchain '${toolchain}'"
                return args + "-DCMAKE_TOOLCHAIN_FILE=${toolchain}"
            } else {
                println "No toolchain specified"
                return args
            }
        }

        workingDir buildDirectory.toString()

        if (project.platform.startsWith("windows")) {
            executable project.cmakePath
            args = cmakeArgs() + ['-G', '"' + project.cmakeGenerator + '"', '-A', project.cmakeArch, project.rootPath]
        } else if (project.platform.startsWith("osx")) {
            executable project.cmakePath
            args = ['-G', "Xcode", project.rootPath] + cmakeArgs()
            if (project.platform == "osx-arm64") {
                environment "ARCHFLAGS", "-arch arm64"
            } else if (project.platform == "osx-x86_64") {
                environment "ARCHFLAGS", "-arch x86_64"
            }
        } else {
            executable project.cmakePath
            args = cmakeArgs() + [project.rootPath]
        }
    }

    def buildTypeFolder = buildType.contains('Debug') ? 'Debug' : 'Release'

    project.tasks.create('make' + buildType, Exec) {
        dependsOn 'cmake' + buildType
        workingDir buildDirectory.toString()
        def processors = Runtime.runtime.availableProcessors()

        if (project.platform.startsWith("windows")) {
            def platformArg = "/p:Platform=x64"
            if (project.platform == "windows-x86") {
                platformArg = "/p:Platform=win32"
            } else if (project.platform == "windows-arm64") {
                platformArg = "/p:Platform=arm64"
            }

            executable 'cmake'
            args = ['--build', '.', '--parallel', "${processors}", '--', '/t:Build', "/p:Configuration=${buildTypeFolder}".toString(), '/v:m', platformArg]
        } else if (project.platform.startsWith("osx")) {
            executable 'sh'
            String incantation = "xcodebuild -alltargets -configuration ${buildTypeFolder} -jobs ${processors}"
            if (project.hasProperty("developerID")) {
                incantation += " CODE_SIGN_IDENTITY=" + project.findProperty("developerID") +
                               " OTHER_CODE_SIGN_FLAGS='--timestamp --options=runtime'"
            }
            args = ["-c", incantation]
        } else {
            executable 'cmake'
            args = ['--build', '.', '--parallel', "${processors}"]
        }
    }

    if (!buildType.contains("Shared")) {
        if (project.platform.startsWith('windows')) {
            project.tasks.create('nativeLibLinks' + buildType, Exec) {
                dependsOn 'make' + buildType
                workingDir buildDirectory.resolve("lib").resolve(buildTypeFolder).toString()
                executable 'lib'
                def inputFiles = ["opencv_calib3d${project.libVersion}", "opencv_features2d${project.libVersion}", "opencv_flann${project.libVersion}", "opencv_gapi${project.libVersion}", "opencv_highgui${project.libVersion}", "opencv_imgcodecs${project.libVersion}", "opencv_imgproc${project.libVersion}", "opencv_ml${project.libVersion}", "opencv_photo${project.libVersion}", "opencv_stitching${project.libVersion}", "opencv_videoio${project.libVersion}", "opencv_video${project.libVersion}", "opencv_core${project.libVersion}", "../../3rdparty/lib/${buildTypeFolder}/ade", "../../3rdparty/lib/${buildTypeFolder}/libjpeg-turbo", "../../3rdparty/lib/${buildTypeFolder}/libopenjp2", "../../3rdparty/lib/${buildTypeFolder}/libpng", "../../3rdparty/lib/${buildTypeFolder}/zlib"]
                def setArgs = ["/OUT:opencv${project.libVersion}.lib"]
                inputFiles.each {
                    def inFile = it
                    if (buildTypeFolder == 'Debug') {
                        inFile = inFile + 'd.lib'
                    } else {
                        inFile = inFile + '.lib'
                    }
                    setArgs << inFile
                }
                args = setArgs
            }
        } else if (project.platform.startsWith('osx')) {
            project.tasks.create('nativeLibLinks' + buildType, Exec) {
                dependsOn 'make' + buildType
                executable 'libtool'
                workingDir buildDirectory.resolve("lib/${buildTypeFolder}").toString()
                def libDirectory = buildDirectory.resolve("lib/${buildTypeFolder}").toFile()
                def thirdPartyLib = buildDirectory.resolve("3rdParty").resolve("lib/${buildTypeFolder}").toFile()
                args '-static'
                args '-o'
                args "libopencv${project.libVersion}.a"
                doFirst {

                    libDirectory.eachFile() {
                        if (!it.name.endsWith('.a') || it.name == "libopencv${project.libVersion}.a".toString()
                                                    || it.name.contains('opencv_ts')) {
                            return
                        }
                        args it.absolutePath
                    }

                    thirdPartyLib.eachFile() {
                        if (!it.name.endsWith('.a')) {
                            return
                        }
                        args it.absolutePath
                    }

                }
                inputs.dir buildDirectory.resolve("lib/${buildTypeFolder}").toFile()
                inputs.dir thirdPartyLib
            }
        } else {
            project.tasks.create('nativeLibLinks' + buildType, Exec) {
                dependsOn 'make' + buildType
                workingDir buildDirectory.resolve("lib").toString()
                executable 'ar'
                args = ['-M']
                def inputFiles = ["libopencv_calib3d", "libopencv_features2d", "libopencv_flann", "libopencv_gapi", "libopencv_highgui", "libopencv_imgcodecs", "libopencv_imgproc", "libopencv_ml", "libopencv_photo", "libopencv_stitching", "libopencv_videoio", "libopencv_video", "libopencv_core", "../3rdparty/lib/libade", "../3rdparty/lib/liblibjpeg-turbo", "../3rdparty/lib/liblibopenjp2", "../3rdparty/lib/liblibpng", "../3rdparty/lib/libzlib"]

                def inputString = "create libopencv${project.libVersion}.a\n"
                inputFiles.each {
                    def inFile = 'addlib ' + it
                    if (buildTypeFolder == 'Debug') {
                        inFile = inFile + 'd.a\n'
                    } else {
                        inFile = inFile + '.a\n'
                    }
                    inputString += inFile
                }

                if (project.platform == "linux-athena" || project.platform == "linux-arm32") {
                    inputString += "addlib ../3rdparty/lib/libtegra_hal.a\n"
                } else if (project.platform == "linux-arm64") {
                    inputString += "addlib ../3rdparty/lib/libtegra_hal.a\n"
                }

                inputString += "save\nend\n"
                standardInput = new ByteArrayInputStream(inputString.getBytes())
            }
        }
    } else if (project.platform.startsWith('linux') && buildType.contains('SharedDebug')) {
        // linux shared Debug
        def stripCopyDir = file("$buildDir/copy${buildType}")
        def stripOutputDir = file("$buildDir/strip${buildType}")
        project.tasks.create('copyLibs' + buildType, Copy) {
            dependsOn 'make' + buildType
            destinationDir = stripCopyDir

            from(buildDirectory.resolve("lib").toFile()) {
                include '*.so.*.*.*'
                exclude 'cv2.so'
                exclude '**/*dephelp*'
                eachFile { f->
                    f.name = f.name.replace("${project.ext.version}", "${project.ext.soVersion}")
                }
            }
            from(buildDirectory.resolve("lib").toFile()) {
                include "*.${project.ext.version}.dylib".toString()
                eachFile { f->
                    f.name = f.name.replace("${project.ext.version}", "${project.ext.soVersion}")
                }
                exclude 'cv2.so'
                exclude '**/*dephelp*'
            }
            from(buildDirectory.resolve("lib").toFile()) {

                include 'libopencv_java*.so'
                include 'libopencv_java*.dylib'
                exclude 'cv2.so'
                exclude '**/*dephelp*'
            }
            from(buildDirectory.resolve("3rdparty").resolve("lib").toFile()) {
                include '*.so'
            }
        }
        project.tasks.create('stripLibs' + buildType) {
            inputs.dir stripCopyDir
            outputs.dir stripOutputDir

            dependsOn 'copyLibs' + buildType

            doLast {
                stripCopyDir.eachFile { File file->
                    def name = file.name
                    def mainFileStr = "${stripOutputDir.toString()}/${name}"
                    def debugFile = "${mainFileStr}.debug"
                    copy {
                        into stripOutputDir
                        from (file)
                    }

                    project.exec { ExecSpec ex ->
                        ex.commandLine objCopyExe, '--only-keep-debug', mainFileStr, debugFile
                    }
                    project.exec { ExecSpec ex ->
                        ex.commandLine stripExe, '-g', mainFileStr
                    }
                    project.exec { ExecSpec ex ->
                        ex.commandLine objCopyExe, "--add-gnu-debuglink=$debugFile", mainFileStr
                    }
                }
            }
        }
    }
}


if (!project.hasProperty('skipRelease')) {
    build.dependsOn make
    build.dependsOn makeShared
}

if (!project.hasProperty('skipDebug')) {
    build.dependsOn makeDebug
    build.dependsOn makeSharedDebug
}

apply from: 'publish.gradle'

wrapper {
    gradleVersion = '8.1'
}
